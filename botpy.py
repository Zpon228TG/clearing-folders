import json
from typing import Union
import requests
import telebot
from telebot import types
import sqlite3

from config import REQUIRED_CHANNEL, ADMIN_ID, CRYPTO_BOT_TOKEN, TOKEN, ALLOW_CURRENCIES

bot = telebot.TeleBot(TOKEN)
user_data = {}

def check_subscription_decorator(channel_id):
    def decorator(func):
        def wrapper(call, *args, **kwargs):
            user_id = call.from_user.id
            try:
                chat_member = bot.get_chat_member(channel_id, user_id)
                if chat_member.status != 'left':
                    return func(call, *args, **kwargs)
                else:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(
                        types.InlineKeyboardButton(
                            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                            url=f"https://t.me/{channel_id.lstrip('@')}"
                        ),
                        types.InlineKeyboardButton(
                            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="check_subscription"
                        )
                    )

                    if hasattr(call, 'message') and call.message:
                        bot.send_message(
                            call.message.chat.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º call.message.chat.id
                            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                            reply_markup=keyboard
                        )
                    else:
                        if hasattr(call, 'chat') and call.chat:
                            bot.send_message(
                                call.chat.id,
                                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                                reply_markup=keyboard
                            )
                        else:
                            pass
            except Exception as e:
                if hasattr(call, 'message') and call.message:
                    bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                else:
                    pass
        return wrapper

    return decorator



def add_user_to_db(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)")
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
    conn.close()

@bot.message_handler(commands=['start'])
@check_subscription_decorator(REQUIRED_CHANNEL)
def start(message):
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    add_user_to_db(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–µ–Ω—é üìã")
    item3 = types.KeyboardButton("–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã üîó")
    item4 = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏")
    item5 = types.KeyboardButton("–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏ üåê")
    item6 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üë§")
    markup.add(item1, item3, item4, item5, item6)

    if int(user_id) == int(ADMIN_ID):
        item_admin = types.KeyboardButton("–ê–¥–º–∏–Ω–∫–∞ üõ†Ô∏è")
        markup.add(item_admin)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ê–¥–º–∏–Ω–∫–∞ üõ†Ô∏è" and int(message.from_user.id) == int(ADMIN_ID))
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üì¢")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item1, back_button)

    bot.send_message(message.chat.id, "–í—ã –≤ –∞–¥–º–∏–Ω–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def get_all_user_ids():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return user_ids


@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üì¢" and int(message.from_user.id) == int(ADMIN_ID))
def send_message_to_all(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –∏–ª–∏ HTML): üìù")
    bot.register_next_step_handler(message, get_message_text)


@check_subscription_decorator(REQUIRED_CHANNEL)
def get_message_text(message):
    text = message.text

    user_data[message.from_user.id] = text

    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("–î–∞, —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º üì∏", callback_data="yes_with_image")
    no_button = types.InlineKeyboardButton("–ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚úâÔ∏è", callback_data="no_with_image")
    markup.add(yes_button, no_button)

    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "yes_with_image")
@check_subscription_decorator(REQUIRED_CHANNEL)
def handle_yes_with_image(call):
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñºÔ∏è.")
    bot.register_next_step_handler(call.message, send_message_with_image)


@bot.callback_query_handler(func=lambda call: call.data == "no_with_image")
@check_subscription_decorator(REQUIRED_CHANNEL)
def handle_no_with_image(call):
    bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üì≠.")
    bot.register_next_step_handler(call.message, send_message_without_image)


def send_message_without_image(message):
    text = user_data.get(message.from_user.id)

    if not text:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_ids = get_all_user_ids()
    progress_msg = bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: 0/{len(user_ids)}")

    progress_count = 0
    for user_id in user_ids:
        try:
            bot.send_message(user_id, text, parse_mode='Markdown')
            progress_count += 1
            bot.edit_message_text(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {progress_count}/{len(user_ids)}",
                                  chat_id=message.chat.id, message_id=progress_msg.message_id)
        except Exception as e:
            pass
    bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {progress_count}/{len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. ‚úÖ")


def send_message_with_image(message):
    caption = user_data.get(message.from_user.id)

    if not caption:
        caption = "–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. ‚ùå"

    if message.photo:
        user_ids = get_all_user_ids()
        progress_msg = bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 0/{len(user_ids)}")

        progress_count = 0
        for user_id in user_ids:
            try:
                bot.send_photo(user_id, message.photo[-1].file_id, caption=caption)
                progress_count += 1
                bot.edit_message_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {progress_count}/{len(user_ids)}",
                                      chat_id=message.chat.id, message_id=progress_msg.message_id)
            except Exception as e:
                pass
        if caption:
            for user_id in user_ids:
                try:
                    bot.send_message(user_id, caption, parse_mode='Markdown')
                except Exception as e:
                    pass
        bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. üì§")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. üö´")






@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
@check_subscription_decorator(REQUIRED_CHANNEL)
def go_back(message):
    start(message)

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
@check_subscription_decorator(REQUIRED_CHANNEL)
def check_subscription_callback1_handler(call):
    user_id = call.from_user.id
    try:
        chat_member = bot.get_chat_member(REQUIRED_CHANNEL, user_id)

        if chat_member.status != 'left':  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ú–µ–Ω—é üìã")
            item3 = types.KeyboardButton("–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã üîó")
            item4 = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏")
            item5 = types.KeyboardButton("–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏ üåê")
            item6 = types.KeyboardButton("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            item7 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üë§")
            markup.add(item1, item3, item4, item5, item6, item7)
            bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=markup)

        else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{REQUIRED_CHANNEL.lstrip('@')}"
                ),
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="check_subscription"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)

    except Exception as e:
        pass

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å üë§")
@check_subscription_decorator(REQUIRED_CHANNEL)
def profile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å (Crypto bot) üí∏")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item1, back_button)
    bot.send_message(message.chat.id, f"–í–∞—à ID: {message.chat.id}", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å (Crypto bot) üí∏")
@check_subscription_decorator(REQUIRED_CHANNEL)
def get_payment(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, ask_currency)



def ask_currency(message):
    try:
        pay_amount = float(message.text)
        markup = types.InlineKeyboardMarkup()

        for currency in ALLOW_CURRENCIES:
            markup.add(types.InlineKeyboardButton(currency, callback_data=f"currency_{currency}_{pay_amount}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("currency_"))
@check_subscription_decorator(REQUIRED_CHANNEL)
def create_invoice(call):
    _, currency, pay_amount = call.data.split('_')
    pay_amount = float(pay_amount)

    status, pay_url, bill_id = crypto_api.bill(pay_amount, currency)

    if status:
        bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {pay_url}")
        bot.send_message(call.message.chat.id, f"–í–∞—à bill_id: {bill_id}")
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")


class CryptobotAPI:
    def __init__(self, token: str):
        self.token = token
        self.base_url = 'https://pay.crypt.bot/api/'
        self.headers = {
            'Crypto-Pay-API-Token': self.token,
            'Content-Type': 'application/x-www-form-urlencoded',
        }

    def bill(self, pay_amount: Union[float, int], currency: str) -> tuple:
        payload = {
            'currency_type': 'fiat',
            'fiat': 'RUB',
            'amount': str(pay_amount),
            'expires_in': 10800,
            'accepted_assets': currency,
        }
        url = self.base_url + "createInvoice"
        response = requests.post(url, headers=self.headers, data=payload)

        try:
            response_data = json.loads(response.text)

            if response.status_code == 200 and response_data.get("ok"):
                if 'result' in response_data and 'pay_url' in response_data['result']:
                    pay_url = response_data['result']['pay_url']
                    invoice_id = response_data['result'].get('invoice_id', None)
                    if invoice_id:
                        return True, pay_url, invoice_id
                    else:
                        return False, "invoice_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API.", None
                else:
                    return False, "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", None
            else:
                return False, f"–û—à–∏–±–∫–∞ API: {response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", None

        except json.JSONDecodeError:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API.", None

    def get_invoice_status(self, invoice_id: str) -> tuple:
        url = self.base_url + f"getInvoice/{invoice_id}"
        response = requests.get(url, headers=self.headers)

        try:
            response_data = json.loads(response.text)
            if response.status_code == 200 and response_data.get("ok"):
                return True, response_data['result']
            else:
                return False, f"–û—à–∏–±–∫–∞ API: {response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        except json.JSONDecodeError:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
crypto_api = CryptobotAPI(CRYPTO_BOT_TOKEN)

@bot.message_handler(func=lambda message: message.text == "–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã üîó")
@check_subscription_decorator(REQUIRED_CHANNEL)
def channels(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("byvalery Artüîû", url="https://t.me/byvaleryart")
    button2 = types.InlineKeyboardButton("–í—Ä–µ–º—è –ò–≥—Ä", url="https://t.me/vremyigr")
    button3 = types.InlineKeyboardButton("–í—Ä–µ–º—è –ò–≥—Äüîû", url="https://t.me/vremyaigr")
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏")
@check_subscription_decorator(REQUIRED_CHANNEL)
def support(message):
    text = """
    üåü **–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!** üåü

    üôè –ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å –º–Ω–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞, –±—É–¥—É –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω!  
    –î–µ–Ω—å–≥–∏ —è —Å–æ–±–∏—Ä–∞—é –Ω–∞ **Telegram –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏–≥—Ä—ã –±–æ–ª–µ–µ 2–ì–±. üì≤

    üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É: **2200700722520920**  
    –ò–ª–∏ —á–µ—Ä–µ–∑ **Boosty**: [–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Boosty –¥–ª—è –¥–æ–Ω–∞—Ç–∞](https://boosty.to/vremyaigor/donate) üéÅ

    üîë –ó–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–∞–º –∏ –º–Ω–æ–≥–æ–º—É –¥—Ä—É–≥–æ–º—É! üöÄ  
    –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíô
    """
    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏ üåê")
@check_subscription_decorator(REQUIRED_CHANNEL)
def social_media(message):
    markup = types.InlineKeyboardMarkup()
    youtube_button = types.InlineKeyboardButton("–ù–∞—à YouTube üì∫", url="https://t.me/your_channel_3")
    markup.add(youtube_button)
    bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚öôÔ∏è")
@check_subscription_decorator(REQUIRED_CHANNEL)
def possibilities(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°—Å—ã–ª–∫–∞1")
    item2 = types.KeyboardButton("–°—Å—ã–ª–∫–∞2")
    item3 = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É ‚úâÔ∏è")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item1, item2, item3 , back_button)
    bot.send_message(message.chat.id, "–ö–∞–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É ‚úâÔ∏è")
@check_subscription_decorator(REQUIRED_CHANNEL)
def send_to_admin(message):
    bot.send_message(message.chat.id, "https://t.me/ValerkaIT")

@bot.message_handler(func=lambda message: message.text == "–°—Å—ã–ª–∫–∞1")
@check_subscription_decorator(REQUIRED_CHANNEL)
def send_to_top1(message):
    bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã(–Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ VPN): https://theporndude.com")

@bot.message_handler(func=lambda message: message.text == "–°—Å—ã–ª–∫–∞2")
@check_subscription_decorator(REQUIRED_CHANNEL)
def send_to_top2(message):
    bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã(–Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ VPN): https://f95zone.to/")

@bot.message_handler(func=lambda message: message.text == "–†–µ–∫–ª–∞–º–∞ üì¢")
@check_subscription_decorator(REQUIRED_CHANNEL)
def advertising(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º üí∞")
    item2 = types.KeyboardButton("–ö—É–ø–∏—Ç—å üõí")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item1)
    markup.add(item2, back_button)
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º üí∞")
@check_subscription_decorator(REQUIRED_CHANNEL)
def price_list(message):
    text = """
    üì¢ **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É** üì¢

    1Ô∏è‚É£ **200‚ÇΩ = 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤** üëÄ  
    –ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ø–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π —É–¥–∞–ª—è–µ—Ç—Å—è ‚è≥

    2Ô∏è‚É£ **500‚ÇΩ = 7 –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ** üìÖ  
    –ü–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π –±—É–¥–µ—Ç –≤–∏—Å–µ—Ç—å –≤ –ª–µ–Ω—Ç–µ 7 –¥–Ω–µ–π, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ—Ç—Å—è üóëÔ∏è

    3Ô∏è‚É£ **1000‚ÇΩ = 30 –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ** üìÖ  
    –ü–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π –±—É–¥–µ—Ç –≤–∏—Å–µ—Ç—å –≤ –ª–µ–Ω—Ç–µ 30 –¥–Ω–µ–π, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª—è–µ—Ç—Å—è üóëÔ∏è

    üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–ö—É–ø–∏—Ç—å üõí"
    """
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–ö—É–ø–∏—Ç—å üõí")
@check_subscription_decorator(REQUIRED_CHANNEL)
def buy(message):
    text = """
    ‚úâÔ∏è **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ** –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –ø–æ—á—Ç—É:  
    üìß **vremyaigor@gmail.com**  

    –ò–ª–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é:  
    üí¨ [t.me/ValerkaIT](https://t.me/ValerkaIT) üë®‚Äçüíª  
    """
    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é üìã")
@check_subscription_decorator(REQUIRED_CHANNEL)
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ üì¢")
    item2 = types.KeyboardButton("–°—Ç–∏–∫–µ—Ä—ã üß∏")
    item3 = types.KeyboardButton("–†–µ–∫–ª–∞–º–∞ üì¢")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item1, item2, item3, back_button)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ üì¢")
@check_subscription_decorator(REQUIRED_CHANNEL)
def news(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(back_button)
    text = """
    ü§ñ **Bot VER/1.0.3**

    üïπÔ∏è –ò–≥—Ä—ã –≤—ã—Ö–æ–¥—è—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—ã—Ö–æ–¥—è—Ç.  
    üì± **–í–µ—Ä—Å–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º** –µ—Å—Ç—å –Ω–µ –Ω–∞ –≤—Å–µ –∏–≥—Ä—ã, –Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç, —è —Å—Ä–∞–∑—É –≤—ã–∫–ª–∞–¥—ã–≤–∞—é.

    ‚ùì **–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è** –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤ —á–∞—Ç –∏–ª–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.  
    üì≤ –Ø —Å–ª–µ–∂—É –∑–∞ –∫–∞–Ω–∞–ª–æ–º –ª–∏—á–Ω–æ –∏ –≤—Å–µ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é.

    üë®‚Äçüíª **Admin**
    """
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∏–∫–µ—Ä—ã üß∏")
@check_subscription_decorator(REQUIRED_CHANNEL)
def stickers(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(back_button)
    bot.send_message(message.chat.id, "https://t.me/addstickers/MurzilkaUSSR")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
