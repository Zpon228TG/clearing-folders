import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8042568924:AAF7i2Z_tADj-QvKuQMxwyc8kAs84A8HX5Y'
CHANNEL_ID = '@marketbotX'

# –í–∞—à Telegram ID
ADMIN_ID = 6578018656  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–∫–∏
@bot.message_handler(commands=['start'])
def start_handler(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üìã", reply_markup=markup)

# –ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_request(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda message: message.chat.id in user_data and 'name' not in user_data[message.chat.id])
def name_handler(message):
    user_data[message.chat.id]['name'] = message.text
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")

@bot.message_handler(func=lambda message: 'description' not in user_data[message.chat.id])
def description_handler(message):
    user_data[message.chat.id]['description'] = message.text
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("Python"), KeyboardButton("JavaScript"), KeyboardButton("Java"))
    markup.add(KeyboardButton("C++"), KeyboardButton("–î—Ä—É–≥–æ–µ"))
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? üñ•Ô∏è", reply_markup=markup)

@bot.message_handler(func=lambda message: 'language' not in user_data[message.chat.id])
def language_handler(message):
    user_data[message.chat.id]['language'] = message.text
    bot.send_message(message.chat.id, "–ö–∞–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? üìö", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: 'libraries' not in user_data[message.chat.id])
def libraries_handler(message):
    user_data[message.chat.id]['libraries'] = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (–≤ —Ü–∏—Ñ—Ä–∞—Ö): üí∞")

@bot.message_handler(func=lambda message: 'cost' not in user_data[message.chat.id])
def cost_handler(message):
    try:
        user_data[message.chat.id]['cost'] = float(message.text)
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–µ–∫—Ç–∞: üñºÔ∏è")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

@bot.message_handler(func=lambda message: 'photo_url' not in user_data[message.chat.id])
def photo_url_handler(message):
    if message.text.startswith("http://") or message.text.startswith("https://"):
        user_data[message.chat.id]['photo_url'] = message.text
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–¥–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–∏ —Ä—É–∫–∏? –ù–∞–∂–º–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç':",
            reply_markup=markup,
        )
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (http:// –∏–ª–∏ https://).")

@bot.message_handler(func=lambda message: 'exclusive' not in user_data[message.chat.id])
def exclusive_handler(message):
    if message.text in ['–î–∞', '–ù–µ—Ç']:
        user_data[message.chat.id]['exclusive'] = (message.text == '–î–∞')
        send_to_channel(message.chat.id)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. üéâ", reply_markup=start_keyboard())
        del user_data[message.chat.id]
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def start_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª
def send_to_channel(user_id):
    data = user_data[user_id]
    message = (
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üíª <b>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {data['language']}\n"
        f"üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:</b> {data['libraries']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['cost']}\n"
        f"üîí <b>–ü—Ä–æ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–∏ —Ä—É–∫–∏:</b> {'–î–∞' if data['exclusive'] else '–ù–µ—Ç'}\n"
        f"üñºÔ∏è <b>–§–æ—Ç–æ:</b> {data['photo_url']}"
    )
    bot.send_message(CHANNEL_ID, message, parse_mode='HTML')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
